{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isIntegerf from '@stdlib/math-base-assert-is-integerf';\nimport isEvenf from '@stdlib/math-base-assert-is-evenf';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport PINF from '@stdlib/constants-float32-pinf';\nimport FLOAT32_MAX_NTH_DOUBLE_FACTORIAL from '@stdlib/constants-float32-max-nth-double-factorial'; // eslint-disable-line id-length\n\n\n// MAIN //\n\n/**\n* Evaluates the double factorial of `n` as a single-precision floating-point number.\n*\n* @param {number} n - input value\n* @returns {(NonNegativeInteger|number)} double factorial\n*\n* @example\n* var v = factorial2f( 3 );\n* // returns 3\n*\n* @example\n* var v = factorial2f( 4 );\n* // returns 8\n*\n* @example\n* var v = factorial2f( 57 );\n* // returns Infinity\n*\n* @example\n* var v = factorial2f( -10 );\n* // returns NaN\n*\n* @example\n* var v = factorial2f( NaN );\n* // returns NaN\n*/\nfunction factorial2f( n ) {\n\tvar last;\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tif ( isnanf( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n > FLOAT32_MAX_NTH_DOUBLE_FACTORIAL ) {\n\t\treturn PINF;\n\t}\n\tif ( n < 0 || isIntegerf( n ) === false ) {\n\t\treturn NaN;\n\t}\n\tv = n|0; // asm type annotation\n\tif ( v === 0|0 || v === 1|0 ) {\n\t\treturn 1|0; // asm type annotation\n\t}\n\tif ( isEvenf( v ) ) {\n\t\tlast = 2|0; // asm type annotation\n\t} else {\n\t\tlast = 3|0; // asm type annotation\n\t}\n\tout = float64ToFloat32( 1 );\n\tfor ( i = v|0; i >= last; i -= 2|0 ) {\n\t\tout = float64ToFloat32( out * i );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default factorial2f;\n"],"names":["factorial2f","n","last","out","v","i","isnanf","NaN","FLOAT32_MAX_NTH_DOUBLE_FACTORIAL","PINF","isIntegerf","isEvenf","float64ToFloat32"],"mappings":";;wlBA0DA,SAASA,EAAaC,GACrB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKC,EAAQL,GACZ,OAAOM,IAER,GAAKN,EAAIO,EACR,OAAOC,EAER,GAAKR,EAAI,IAAyB,IAApBS,EAAYT,GACzB,OAAOM,IAGR,GAAW,KADXH,EAAM,EAAFH,GACS,GAAW,IAANG,EAAQ,EACzB,OAAO,EAQR,IALCF,EADIS,EAASP,GACN,EAEA,EAERD,EAAMS,EAAkB,GAClBP,EAAM,EAAFD,EAAKC,GAAKH,EAAMG,GAAK,EAC9BF,EAAMS,EAAkBT,EAAME,GAE/B,OAAOF,CACR"}
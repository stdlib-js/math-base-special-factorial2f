{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isIntegerf = require( '@stdlib/math-base-assert-is-integerf' );\nvar isEvenf = require( '@stdlib/math-base-assert-is-evenf' );\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar PINF = require( '@stdlib/constants-float32-pinf' );\nvar FLOAT32_MAX_NTH_DOUBLE_FACTORIAL = require( '@stdlib/constants-float32-max-nth-double-factorial' ); // eslint-disable-line id-length\n\n\n// MAIN //\n\n/**\n* Evaluates the double factorial of `n` as a single-precision floating-point number.\n*\n* @param {number} n - input value\n* @returns {(NonNegativeInteger|number)} double factorial\n*\n* @example\n* var v = factorial2f( 3 );\n* // returns 3\n*\n* @example\n* var v = factorial2f( 4 );\n* // returns 8\n*\n* @example\n* var v = factorial2f( 57 );\n* // returns Infinity\n*\n* @example\n* var v = factorial2f( -10 );\n* // returns NaN\n*\n* @example\n* var v = factorial2f( NaN );\n* // returns NaN\n*/\nfunction factorial2f( n ) {\n\tvar last;\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tif ( isnanf( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n > FLOAT32_MAX_NTH_DOUBLE_FACTORIAL ) {\n\t\treturn PINF;\n\t}\n\tif ( n < 0 || isIntegerf( n ) === false ) {\n\t\treturn NaN;\n\t}\n\tv = n|0; // asm type annotation\n\tif ( v === 0|0 || v === 1|0 ) {\n\t\treturn 1|0; // asm type annotation\n\t}\n\tif ( isEvenf( v ) ) {\n\t\tlast = 2|0; // asm type annotation\n\t} else {\n\t\tlast = 3|0; // asm type annotation\n\t}\n\tout = float64ToFloat32( 1 );\n\tfor ( i = v|0; i >= last; i -= 2|0 ) {\n\t\tout = float64ToFloat32( out * i );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = factorial2f;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the double factorial function as a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-factorial2f\n*\n* @example\n* var factorial2f = require( '@stdlib/math-base-special-factorial2f' );\n*\n* var v = factorial2f( 3 );\n* // returns 3\n*\n* v = factorial2f( 4 );\n* // returns 8\n*\n* v = factorial2f( 57 );\n* // returns Infinity\n*\n* v = factorial2f( -10 );\n* // returns NaN\n*\n* v = factorial2f( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAa,QAAS,sCAAuC,EAC7DC,EAAU,QAAS,mCAAoC,EACvDC,EAAmB,QAAS,wCAAyC,EACrEC,EAAO,QAAS,gCAAiC,EACjDC,EAAmC,QAAS,oDAAqD,EA+BrG,SAASC,EAAaC,EAAI,CACzB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKX,EAAQO,CAAE,EACd,MAAO,KAER,GAAKA,EAAIF,EACR,OAAOD,EAER,GAAKG,EAAI,GAAKN,EAAYM,CAAE,IAAM,GACjC,MAAO,KAGR,GADAG,EAAIH,EAAE,EACDG,IAAM,EAAE,GAAKA,IAAM,EAAE,EACzB,MAAO,GAQR,IANKR,EAASQ,CAAE,EACfF,EAAO,EAEPA,EAAO,EAERC,EAAMN,EAAkB,CAAE,EACpBQ,EAAID,EAAE,EAAGC,GAAKH,EAAMG,GAAK,EAC9BF,EAAMN,EAAkBM,EAAME,CAAE,EAEjC,OAAOF,CACR,CAKAV,EAAO,QAAUO,IC9CjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnanf", "isIntegerf", "isEvenf", "float64ToFloat32", "PINF", "FLOAT32_MAX_NTH_DOUBLE_FACTORIAL", "factorial2f", "n", "last", "out", "v", "i", "main"]
}
